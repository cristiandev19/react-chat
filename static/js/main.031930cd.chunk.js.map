{"version":3,"sources":["config/index.js","auth/AuthContext.js","hooks/useForm.js","types/auth.types.js","pages/Home.jsx","components/ChatScreen.jsx","pages/Chat/Chat.jsx","auth/AuthReducer.js","App.jsx","reportWebVitals.js","index.js"],"names":["config","dev","process","backend","module","exports","AuthContext","createContext","require","useForm","initialize","useState","value","setValue","handleInputChange","target","name","types","login","logout","Home","history","useHistory","useContext","user","dispatch","userName","chatForm","handleChatFormChange","console","log","logged","htmlFor","type","id","onChange","onClick","payload","push","ChatScreen","chatMessages","setChatMessages","socket","setSocket","socketConnected","setSocketConnected","message","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","scrollToBottom","socketIOClient","disconnect","on","connected","data","oldArray","className","map","chatMessage","time","ref","onSubmit","e","preventDefault","newMessage","Date","now","emit","oldMessages","Chat","idChat","useParams","authReducer","state","action","init","JSON","parse","localStorage","getItem","App","useReducer","setItem","stringify","Provider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.031930cd.chunk.js","sourcesContent":["const config = {\n  dev     : process.env.NODE_ENV !== 'production',\n  backend : process.env.NODE_ENV !== 'production' ? 'http://localhost:8089' : 'http://appreact-chat.herokuapp.com/',\n  // backend : 'http://appreact-chat.herokuapp.com/',\n};\n\nmodule.exports = {\n  config,\n};\n","const { createContext } = require('react');\n\nconst AuthContext = createContext();\n\nexport default AuthContext;\n","import { useState } from 'react';\n\nconst useForm = (initialize = {}) => {\n  const [value, setValue] = useState(initialize);\n\n  const handleInputChange = ({ target }) => {\n    setValue({\n      ...value,\n      [target.name]: target.value,\n    });\n  };\n\n  return [value, handleInputChange, setValue];\n};\n\nexport default useForm;\n","const types = {\n  login  : '[auth] login',\n  logout : '[auth] logout',\n};\n\nexport default types;\n","import {\n  useHistory,\n} from 'react-router-dom';\nimport React, { useContext } from 'react';\nimport AuthContext from '../auth/AuthContext';\nimport useForm from '../hooks/useForm';\nimport types from '../types/auth.types';\n\nconst Home = () => {\n  const history = useHistory();\n\n  const { user, dispatch } = useContext(AuthContext);\n\n  const [chatForm, handleChatFormChange] = useForm({\n    userName: '',\n  });\n  const handleLogin = () => {\n    const userName = chatForm;\n    console.log({ userName });\n    dispatch({\n      type    : types.login,\n      payload : { ...userName },\n    });\n    history.push(`/chat/${123}`);\n  };\n  console.log('user', user);\n\n  return (\n    <div>\n      {\n        user.logged\n          ? <h2>{ `Bienvenido ${user.userName}` }</h2>\n          : <h2>Bienvenido a tu chat</h2>\n      }\n      <label htmlFor=\"userName\">\n        Ingresa tu nombre de usuario:\n        <input\n          type=\"text\"\n          name=\"userName\"\n          id=\"userName\"\n          onChange={handleChatFormChange}\n        />\n      </label>\n      <button onClick={handleLogin} type=\"button\">Ingresar</button>\n    </div>\n  );\n};\n\nexport default Home;\n","import socketIOClient from 'socket.io-client';\nimport {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport useForm from '../hooks/useForm';\nimport AuthContext from '../auth/AuthContext';\nimport { config } from '../config';\n\nconst ChatScreen = () => {\n  const [chatMessages, setChatMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const { user } = useContext(AuthContext);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [chatForm, handleChatFormChange, setValue] = useForm({\n    message: '',\n  });\n  const { message } = chatForm;\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatMessages]);\n\n  useEffect(() => {\n    console.log('socket', socket);\n    console.log('process.env.BACK_DOMAIN', config.backend);\n    if (!socket) {\n      setSocket(socketIOClient(config.backend));\n    }\n    console.log('socket', socket);\n\n    return () => (socket ? socket.disconnect() : null);\n  }, []);\n\n  // subscribe to the socket event\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('connect', () => {\n      setSocketConnected(socket.connected);\n    });\n    console.log('socketConnected', socketConnected);\n    const newLocal = 'updateChat';\n    socket.on(newLocal, (data) => {\n      setChatMessages((oldArray) => [...oldArray, data]);\n    });\n    socket.on('disconnect', () => {\n      setSocketConnected(socket.connected);\n    });\n  }, [socket]);\n\n  const handleSendMessage = (e) => {\n    console.log('e', e);\n    e.preventDefault();\n    const newMessage = {\n      message,\n      userName : user.userName,\n      time     : Date.now(),\n    };\n    socket.emit('newMessage', newMessage);\n    setChatMessages((oldMessages) => [...oldMessages, newMessage]);\n    setValue({\n      ...chatForm,\n      message: '',\n    });\n  };\n\n  return (\n\n    <div className=\"chat-container\">\n      <div className=\"chat-messages\">\n        {\n          chatMessages.map((chatMessage) => (\n            chatMessage.userName === user.userName\n              ? (\n                <div key={chatMessage.time} className=\"message my-message\">\n                  <div className=\"message-content\">\n                    {chatMessage.message}\n                  </div>\n                  <div className=\"message-user\">\n                    {chatMessage.userName}\n                  </div>\n                </div>\n              )\n              : (\n                <div key={chatMessage.time} className=\"message other-message\">\n                  <div className=\"message-content\">\n                    {chatMessage.message}\n                  </div>\n                  <div className=\"message-user\">\n                    {chatMessage.userName}\n                  </div>\n                </div>\n              )\n          ))\n        }\n        <div ref={messagesEndRef} />\n      </div>\n      <form onSubmit={handleSendMessage} className=\"chat-form\">\n        <label htmlFor=\"message\" className=\"message-input\">\n          Escribe el mensaje\n          <input\n            type=\"text\"\n            name=\"message\"\n            id=\"message\"\n            onChange={handleChatFormChange}\n            value={message}\n          />\n        </label>\n        <button type=\"submit\">Enviar</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatScreen;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport ChatScreen from '../../components/ChatScreen';\n\nconst Chat = () => {\n  const { idChat } = useParams();\n  console.log('params', idChat);\n  return (\n    <div>\n      <ChatScreen />\n    </div>\n  );\n};\n\nexport default Chat;\n","import types from '../types/auth.types';\n\n// const state = {\n//   userName : 'cris',\n//   logged   : true,\n// };\n\nconst authReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.login:\n      return {\n        ...action.payload,\n        logged: true,\n      };\n    case types.logout:\n      return {\n        ...action.payload,\n        logged: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","import './App.css';\nimport './styles/utils.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport { useEffect, useReducer } from 'react';\n\nimport Home from './pages/Home';\nimport Chat from './pages/Chat/Chat';\nimport AuthContext from './auth/AuthContext';\nimport authReducer from './auth/AuthReducer';\n\nconst init = () => JSON.parse(localStorage.getItem('userChat')) || { logged: false };\n\nfunction App() {\n  const [user, dispatch] = useReducer(authReducer, {}, init);\n\n  useEffect(() => {\n    localStorage.setItem('userChat', JSON.stringify(user));\n  }, [user]);\n\n  return (\n    <AuthContext.Provider value={{ user, dispatch }}>\n      <Router>\n        <Switch>\n          <Route path=\"/chat/:idChat\">\n            <Chat />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // eslint-disable-next-line react/jsx-filename-extension\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}